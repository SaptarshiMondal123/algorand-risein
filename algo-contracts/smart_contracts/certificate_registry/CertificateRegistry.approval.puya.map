{
  "version": 3,
  "sources": [
    "../../certificate_registry/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAWA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;AAAA;;;AAmCK;;AAAA;AAAA;AAAA;;AAAA;AAnCL;;;AAAA;;;AAAA;;;AAAA;;;AAmCK;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAvBL;;;AAAA;;;AAuBK;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AATL;;;AAAA;;;AASK;;;AAAA;;AATL;;AAAA;;;;;;;;;AASA;;;AAOyB;AAAA;;AAAA;AAAA;AAAA;AAAyC;AAAzC;;AAAA;AAGQ;AAAlB;AAAP;AAE+B;;AAA/B;;AAAA;;AAAA;;AAER;;;AASgB;AAAA;;AAAA;AAAA;AAAyC;AAAzC;;AAAA;AACR;AAER;;;AASwB;AAAA;;AAAA;AAAA;AAAA;AAAyC;AAAzC;;AAAA;AAGT;AAAiB;AAAjB;AAAP;AAGwB;;AAAjB;AAAP;AAEA;AAAA;;AAAA;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.certificate_registry.contract.CertificateRegistry.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "bytecblock 0x \"certificates\""
    },
    "20": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "22": {
      "op": "bz main_bare_routing@8",
      "stack_out": []
    },
    "25": {
      "op": "pushbytess 0x5766f7e7 0x3e95270e 0xbbea12db // method \"register_certificate(byte[])void\", method \"verify_certificate(byte[])byte[]\", method \"transfer_certificate(byte[],byte[])void\"",
      "defined_out": [
        "Method(register_certificate(byte[])void)",
        "Method(transfer_certificate(byte[],byte[])void)",
        "Method(verify_certificate(byte[])byte[])"
      ],
      "stack_out": [
        "Method(register_certificate(byte[])void)",
        "Method(verify_certificate(byte[])byte[])",
        "Method(transfer_certificate(byte[],byte[])void)"
      ]
    },
    "42": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(register_certificate(byte[])void)",
        "Method(transfer_certificate(byte[],byte[])void)",
        "Method(verify_certificate(byte[])byte[])",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(register_certificate(byte[])void)",
        "Method(verify_certificate(byte[])byte[])",
        "Method(transfer_certificate(byte[],byte[])void)",
        "tmp%2#0"
      ]
    },
    "45": {
      "op": "match main_register_certificate_route@5 main_verify_certificate_route@6 main_transfer_certificate_route@7",
      "stack_out": []
    },
    "53": {
      "block": "main_after_if_else@10",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "55": {
      "op": "return",
      "stack_out": []
    },
    "56": {
      "block": "main_transfer_certificate_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "58": {
      "op": "!",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "59": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "60": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "62": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "63": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "66": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "69": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%21#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%22#0"
      ]
    },
    "72": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%21#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%21#0",
        "tmp%23#0"
      ]
    },
    "75": {
      "callsub": "smart_contracts.certificate_registry.contract.CertificateRegistry.transfer_certificate",
      "op": "callsub transfer_certificate",
      "stack_out": []
    },
    "78": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "79": {
      "op": "return",
      "stack_out": []
    },
    "80": {
      "block": "main_verify_certificate_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "82": {
      "op": "!",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "83": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "84": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "86": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "87": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "90": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "93": {
      "callsub": "smart_contracts.certificate_registry.contract.CertificateRegistry.verify_certificate",
      "op": "callsub verify_certificate",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "96": {
      "op": "dup",
      "defined_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ],
      "stack_out": [
        "to_encode%0#0",
        "to_encode%0#0 (copy)"
      ]
    },
    "97": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length%0#0"
      ]
    },
    "98": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "as_bytes%0#0"
      ]
    },
    "99": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "length_uint16%0#0"
      ]
    },
    "102": {
      "op": "swap",
      "stack_out": [
        "length_uint16%0#0",
        "to_encode%0#0"
      ]
    },
    "103": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0"
      ]
    },
    "104": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "0x151f7c75"
      ]
    },
    "110": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_value%0#0"
      ]
    },
    "111": {
      "op": "concat",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "112": {
      "op": "log",
      "stack_out": []
    },
    "113": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "114": {
      "op": "return",
      "stack_out": []
    },
    "115": {
      "block": "main_register_certificate_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "117": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "118": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "119": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "121": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "122": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "125": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "128": {
      "callsub": "smart_contracts.certificate_registry.contract.CertificateRegistry.register_certificate",
      "op": "callsub register_certificate",
      "stack_out": []
    },
    "131": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "132": {
      "op": "return",
      "stack_out": []
    },
    "133": {
      "block": "main_bare_routing@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "135": {
      "op": "bnz main_after_if_else@10",
      "stack_out": []
    },
    "138": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "140": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "141": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "142": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "143": {
      "op": "return",
      "stack_out": []
    },
    "144": {
      "subroutine": "smart_contracts.certificate_registry.contract.CertificateRegistry.register_certificate",
      "params": {
        "cert_hash#0": "bytes"
      },
      "block": "register_certificate",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "147": {
      "op": "bytec_1 // \"certificates\"",
      "defined_out": [
        "\"certificates\""
      ],
      "stack_out": [
        "\"certificates\""
      ]
    },
    "148": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ],
      "stack_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ]
    },
    "150": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "151": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "152": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "153": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x"
      ]
    },
    "154": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "156": {
      "op": "select",
      "defined_out": [
        "box_prefixed_key%0#0",
        "existing_owner#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "existing_owner#0"
      ]
    },
    "157": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "box_prefixed_key%0#0",
        "existing_owner#0",
        "0x"
      ]
    },
    "158": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%0#0"
      ]
    },
    "159": {
      "error": "Certificate hash is already registered.",
      "op": "assert // Certificate hash is already registered.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "160": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ]
    },
    "162": {
      "op": "dig 1",
      "stack_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "164": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0",
        "{box_del}"
      ]
    },
    "165": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0",
        "materialized_values%0#0"
      ]
    },
    "166": {
      "op": "box_put",
      "stack_out": []
    },
    "167": {
      "retsub": true,
      "op": "retsub"
    },
    "168": {
      "subroutine": "smart_contracts.certificate_registry.contract.CertificateRegistry.verify_certificate",
      "params": {
        "cert_hash#0": "bytes"
      },
      "block": "verify_certificate",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "171": {
      "op": "bytec_1 // \"certificates\"",
      "defined_out": [
        "\"certificates\""
      ],
      "stack_out": [
        "\"certificates\""
      ]
    },
    "172": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ],
      "stack_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ]
    },
    "174": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "175": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "176": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x"
      ]
    },
    "177": {
      "op": "cover 2",
      "stack_out": [
        "0x",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "179": {
      "op": "select",
      "defined_out": [
        "owner#0"
      ],
      "stack_out": [
        "owner#0"
      ]
    },
    "180": {
      "retsub": true,
      "op": "retsub"
    },
    "181": {
      "subroutine": "smart_contracts.certificate_registry.contract.CertificateRegistry.transfer_certificate",
      "params": {
        "cert_hash#0": "bytes",
        "new_owner#0": "bytes"
      },
      "block": "transfer_certificate",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "184": {
      "op": "bytec_1 // \"certificates\"",
      "defined_out": [
        "\"certificates\""
      ],
      "stack_out": [
        "\"certificates\""
      ]
    },
    "185": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ],
      "stack_out": [
        "\"certificates\"",
        "cert_hash#0 (copy)"
      ]
    },
    "187": {
      "op": "concat",
      "defined_out": [
        "box_prefixed_key%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "188": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "189": {
      "op": "box_get",
      "defined_out": [
        "box_prefixed_key%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "190": {
      "op": "bytec_0 // 0x",
      "defined_out": [
        "0x",
        "box_prefixed_key%0#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0",
        "0x"
      ]
    },
    "191": {
      "op": "cover 2",
      "stack_out": [
        "box_prefixed_key%0#0",
        "0x",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "193": {
      "op": "select",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_owner#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0"
      ]
    },
    "194": {
      "op": "dup",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "current_owner#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "current_owner#0 (copy)"
      ]
    },
    "195": {
      "op": "bytec_0 // 0x",
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "current_owner#0 (copy)",
        "0x"
      ]
    },
    "196": {
      "op": "!=",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "tmp%0#0"
      ]
    },
    "197": {
      "error": "Certificate not found or not registered.",
      "op": "assert // Certificate not found or not registered.",
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0"
      ]
    },
    "198": {
      "op": "txn Sender",
      "defined_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "current_owner#0",
        "tmp%1#0"
      ]
    },
    "200": {
      "op": "==",
      "defined_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "tmp%2#0"
      ]
    },
    "201": {
      "error": "Permission denied: Only the current owner can transfer.",
      "op": "assert // Permission denied: Only the current owner can transfer.",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "202": {
      "op": "dup",
      "stack_out": [
        "box_prefixed_key%0#0",
        "box_prefixed_key%0#0 (copy)"
      ]
    },
    "203": {
      "op": "box_del",
      "defined_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "{box_del}"
      ]
    },
    "204": {
      "op": "pop",
      "stack_out": [
        "box_prefixed_key%0#0"
      ]
    },
    "205": {
      "op": "frame_dig -1",
      "defined_out": [
        "box_prefixed_key%0#0",
        "new_owner#0 (copy)"
      ],
      "stack_out": [
        "box_prefixed_key%0#0",
        "new_owner#0 (copy)"
      ]
    },
    "207": {
      "op": "box_put",
      "stack_out": []
    },
    "208": {
      "retsub": true,
      "op": "retsub"
    }
  }
}